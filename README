bingcc is a wrapper around gcc and mjau's gensymoverride for generating binaries
which do not depend on newer glibc versions. It's got a pretty basic website at
http://davidgow.net/hacks/bingcc.html

It doesn't touch libstdc++ at all, just libc, so while it should fix most of the
GLIBC errors, it won't do a thing about the GLIBCXX ones. Try statically linking
libstdc++ or using an old compiler (before gcc 4.6, you're probably pretty safe
if you don't use many fancy STL features).

Hopefully this will help make the world just a little more compatible. If it's
not working (it's really just a bit of an experiment), let me know. Using an
older toolchain (or indeed an older distro in a VM) will probably be a bit more
reliable.

It's all in the public domain (or Creative Commons Zero) except for
gensymoverride, which isn't mine to license. Have fun with it, and let me know
if you make any improvements. The "32" versions of things simply add "-m32" to
the cflags for cross-compiling.

Usage:

[optional]: run ./setup-bingcc [max glibc version]
 - This scans your system libraries and generates the header using mjau's
   gensymoverride. Max glibc version defaults to 2.3.6.

run bingcc-env:
 - This launces a bash shell which will have bingcc set up: it sets the CC and
   CXX environment variables to point to bingcc/bing++. ./configure (or
   cmake) and build within this shell.

check to see if it worked:
 - use objdump -p <binary> to have a look at what's required
 - objdump -CT <binary> | grep <version> to see what symbols are causing
   problems.

Notes:

There's some commented out code for stdc++ stuff, which might work pre gcc4.6,
but I've not had much luck yet myself.




